/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ShoppingCart } from "./ShoppingCart";
import { ShoppingCartCountArgs } from "./ShoppingCartCountArgs";
import { ShoppingCartFindManyArgs } from "./ShoppingCartFindManyArgs";
import { ShoppingCartFindUniqueArgs } from "./ShoppingCartFindUniqueArgs";
import { CreateShoppingCartArgs } from "./CreateShoppingCartArgs";
import { UpdateShoppingCartArgs } from "./UpdateShoppingCartArgs";
import { DeleteShoppingCartArgs } from "./DeleteShoppingCartArgs";
import { ShoppingCartService } from "../shoppingCart.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ShoppingCart)
export class ShoppingCartResolverBase {
  constructor(
    protected readonly service: ShoppingCartService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ShoppingCart",
    action: "read",
    possession: "any",
  })
  async _shoppingCartsMeta(
    @graphql.Args() args: ShoppingCartCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ShoppingCart])
  @nestAccessControl.UseRoles({
    resource: "ShoppingCart",
    action: "read",
    possession: "any",
  })
  async shoppingCarts(
    @graphql.Args() args: ShoppingCartFindManyArgs
  ): Promise<ShoppingCart[]> {
    return this.service.shoppingCarts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ShoppingCart, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ShoppingCart",
    action: "read",
    possession: "own",
  })
  async shoppingCart(
    @graphql.Args() args: ShoppingCartFindUniqueArgs
  ): Promise<ShoppingCart | null> {
    const result = await this.service.shoppingCart(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ShoppingCart)
  @nestAccessControl.UseRoles({
    resource: "ShoppingCart",
    action: "create",
    possession: "any",
  })
  async createShoppingCart(
    @graphql.Args() args: CreateShoppingCartArgs
  ): Promise<ShoppingCart> {
    return await this.service.createShoppingCart({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ShoppingCart)
  @nestAccessControl.UseRoles({
    resource: "ShoppingCart",
    action: "update",
    possession: "any",
  })
  async updateShoppingCart(
    @graphql.Args() args: UpdateShoppingCartArgs
  ): Promise<ShoppingCart | null> {
    try {
      return await this.service.updateShoppingCart({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShoppingCart)
  @nestAccessControl.UseRoles({
    resource: "ShoppingCart",
    action: "delete",
    possession: "any",
  })
  async deleteShoppingCart(
    @graphql.Args() args: DeleteShoppingCartArgs
  ): Promise<ShoppingCart | null> {
    try {
      return await this.service.deleteShoppingCart(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
