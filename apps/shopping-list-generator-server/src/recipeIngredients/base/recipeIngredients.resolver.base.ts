/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RecipeIngredients } from "./RecipeIngredients";
import { RecipeIngredientsCountArgs } from "./RecipeIngredientsCountArgs";
import { RecipeIngredientsFindManyArgs } from "./RecipeIngredientsFindManyArgs";
import { RecipeIngredientsFindUniqueArgs } from "./RecipeIngredientsFindUniqueArgs";
import { CreateRecipeIngredientsArgs } from "./CreateRecipeIngredientsArgs";
import { UpdateRecipeIngredientsArgs } from "./UpdateRecipeIngredientsArgs";
import { DeleteRecipeIngredientsArgs } from "./DeleteRecipeIngredientsArgs";
import { Ingredients } from "../../ingredients/base/Ingredients";
import { Recipes } from "../../recipes/base/Recipes";
import { RecipeIngredientsService } from "../recipeIngredients.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RecipeIngredients)
export class RecipeIngredientsResolverBase {
  constructor(
    protected readonly service: RecipeIngredientsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "read",
    possession: "any",
  })
  async _recipeIngredientsItemsMeta(
    @graphql.Args() args: RecipeIngredientsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RecipeIngredients])
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "read",
    possession: "any",
  })
  async recipeIngredientsItems(
    @graphql.Args() args: RecipeIngredientsFindManyArgs
  ): Promise<RecipeIngredients[]> {
    return this.service.recipeIngredientsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RecipeIngredients, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "read",
    possession: "own",
  })
  async recipeIngredients(
    @graphql.Args() args: RecipeIngredientsFindUniqueArgs
  ): Promise<RecipeIngredients | null> {
    const result = await this.service.recipeIngredients(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RecipeIngredients)
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "create",
    possession: "any",
  })
  async createRecipeIngredients(
    @graphql.Args() args: CreateRecipeIngredientsArgs
  ): Promise<RecipeIngredients> {
    return await this.service.createRecipeIngredients({
      ...args,
      data: {
        ...args.data,

        ingredient: args.data.ingredient
          ? {
              connect: args.data.ingredient,
            }
          : undefined,

        recipe: args.data.recipe
          ? {
              connect: args.data.recipe,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RecipeIngredients)
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "update",
    possession: "any",
  })
  async updateRecipeIngredients(
    @graphql.Args() args: UpdateRecipeIngredientsArgs
  ): Promise<RecipeIngredients | null> {
    try {
      return await this.service.updateRecipeIngredients({
        ...args,
        data: {
          ...args.data,

          ingredient: args.data.ingredient
            ? {
                connect: args.data.ingredient,
              }
            : undefined,

          recipe: args.data.recipe
            ? {
                connect: args.data.recipe,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecipeIngredients)
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "delete",
    possession: "any",
  })
  async deleteRecipeIngredients(
    @graphql.Args() args: DeleteRecipeIngredientsArgs
  ): Promise<RecipeIngredients | null> {
    try {
      return await this.service.deleteRecipeIngredients(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Ingredients, {
    nullable: true,
    name: "ingredient",
  })
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "read",
    possession: "any",
  })
  async getIngredient(
    @graphql.Parent() parent: RecipeIngredients
  ): Promise<Ingredients | null> {
    const result = await this.service.getIngredient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Recipes, {
    nullable: true,
    name: "recipe",
  })
  @nestAccessControl.UseRoles({
    resource: "Recipes",
    action: "read",
    possession: "any",
  })
  async getRecipe(
    @graphql.Parent() parent: RecipeIngredients
  ): Promise<Recipes | null> {
    const result = await this.service.getRecipe(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
