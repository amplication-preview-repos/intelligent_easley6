/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Recipes as PrismaRecipes,
  RecipeIngredients as PrismaRecipeIngredients,
} from "@prisma/client";

export class RecipesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RecipesCountArgs, "select">): Promise<number> {
    return this.prisma.recipes.count(args);
  }

  async recipesItems(
    args: Prisma.RecipesFindManyArgs
  ): Promise<PrismaRecipes[]> {
    return this.prisma.recipes.findMany(args);
  }
  async recipes(
    args: Prisma.RecipesFindUniqueArgs
  ): Promise<PrismaRecipes | null> {
    return this.prisma.recipes.findUnique(args);
  }
  async createRecipes(args: Prisma.RecipesCreateArgs): Promise<PrismaRecipes> {
    return this.prisma.recipes.create(args);
  }
  async updateRecipes(args: Prisma.RecipesUpdateArgs): Promise<PrismaRecipes> {
    return this.prisma.recipes.update(args);
  }
  async deleteRecipes(args: Prisma.RecipesDeleteArgs): Promise<PrismaRecipes> {
    return this.prisma.recipes.delete(args);
  }

  async findRecipeIngredientsItems(
    parentId: string,
    args: Prisma.RecipeIngredientsFindManyArgs
  ): Promise<PrismaRecipeIngredients[]> {
    return this.prisma.recipes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recipeIngredientsItems(args);
  }
}
