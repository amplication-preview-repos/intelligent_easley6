/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Recipes } from "./Recipes";
import { RecipesCountArgs } from "./RecipesCountArgs";
import { RecipesFindManyArgs } from "./RecipesFindManyArgs";
import { RecipesFindUniqueArgs } from "./RecipesFindUniqueArgs";
import { CreateRecipesArgs } from "./CreateRecipesArgs";
import { UpdateRecipesArgs } from "./UpdateRecipesArgs";
import { DeleteRecipesArgs } from "./DeleteRecipesArgs";
import { RecipeIngredientsFindManyArgs } from "../../recipeIngredients/base/RecipeIngredientsFindManyArgs";
import { RecipeIngredients } from "../../recipeIngredients/base/RecipeIngredients";
import { RecipesService } from "../recipes.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Recipes)
export class RecipesResolverBase {
  constructor(
    protected readonly service: RecipesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Recipes",
    action: "read",
    possession: "any",
  })
  async _recipesItemsMeta(
    @graphql.Args() args: RecipesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Recipes])
  @nestAccessControl.UseRoles({
    resource: "Recipes",
    action: "read",
    possession: "any",
  })
  async recipesItems(
    @graphql.Args() args: RecipesFindManyArgs
  ): Promise<Recipes[]> {
    return this.service.recipesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Recipes, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Recipes",
    action: "read",
    possession: "own",
  })
  async recipes(
    @graphql.Args() args: RecipesFindUniqueArgs
  ): Promise<Recipes | null> {
    const result = await this.service.recipes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Recipes)
  @nestAccessControl.UseRoles({
    resource: "Recipes",
    action: "create",
    possession: "any",
  })
  async createRecipes(
    @graphql.Args() args: CreateRecipesArgs
  ): Promise<Recipes> {
    return await this.service.createRecipes({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Recipes)
  @nestAccessControl.UseRoles({
    resource: "Recipes",
    action: "update",
    possession: "any",
  })
  async updateRecipes(
    @graphql.Args() args: UpdateRecipesArgs
  ): Promise<Recipes | null> {
    try {
      return await this.service.updateRecipes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recipes)
  @nestAccessControl.UseRoles({
    resource: "Recipes",
    action: "delete",
    possession: "any",
  })
  async deleteRecipes(
    @graphql.Args() args: DeleteRecipesArgs
  ): Promise<Recipes | null> {
    try {
      return await this.service.deleteRecipes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RecipeIngredients], {
    name: "recipeIngredientsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "read",
    possession: "any",
  })
  async findRecipeIngredientsItems(
    @graphql.Parent() parent: Recipes,
    @graphql.Args() args: RecipeIngredientsFindManyArgs
  ): Promise<RecipeIngredients[]> {
    const results = await this.service.findRecipeIngredientsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
