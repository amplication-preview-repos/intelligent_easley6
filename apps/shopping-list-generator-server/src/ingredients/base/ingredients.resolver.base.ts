/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Ingredients } from "./Ingredients";
import { IngredientsCountArgs } from "./IngredientsCountArgs";
import { IngredientsFindManyArgs } from "./IngredientsFindManyArgs";
import { IngredientsFindUniqueArgs } from "./IngredientsFindUniqueArgs";
import { CreateIngredientsArgs } from "./CreateIngredientsArgs";
import { UpdateIngredientsArgs } from "./UpdateIngredientsArgs";
import { DeleteIngredientsArgs } from "./DeleteIngredientsArgs";
import { RecipeIngredientsFindManyArgs } from "../../recipeIngredients/base/RecipeIngredientsFindManyArgs";
import { RecipeIngredients } from "../../recipeIngredients/base/RecipeIngredients";
import { IngredientsService } from "../ingredients.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Ingredients)
export class IngredientsResolverBase {
  constructor(
    protected readonly service: IngredientsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "read",
    possession: "any",
  })
  async _ingredientsItemsMeta(
    @graphql.Args() args: IngredientsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ingredients])
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "read",
    possession: "any",
  })
  async ingredientsItems(
    @graphql.Args() args: IngredientsFindManyArgs
  ): Promise<Ingredients[]> {
    return this.service.ingredientsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ingredients, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "read",
    possession: "own",
  })
  async ingredients(
    @graphql.Args() args: IngredientsFindUniqueArgs
  ): Promise<Ingredients | null> {
    const result = await this.service.ingredients(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ingredients)
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "create",
    possession: "any",
  })
  async createIngredients(
    @graphql.Args() args: CreateIngredientsArgs
  ): Promise<Ingredients> {
    return await this.service.createIngredients({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ingredients)
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "update",
    possession: "any",
  })
  async updateIngredients(
    @graphql.Args() args: UpdateIngredientsArgs
  ): Promise<Ingredients | null> {
    try {
      return await this.service.updateIngredients({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ingredients)
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "delete",
    possession: "any",
  })
  async deleteIngredients(
    @graphql.Args() args: DeleteIngredientsArgs
  ): Promise<Ingredients | null> {
    try {
      return await this.service.deleteIngredients(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RecipeIngredients], {
    name: "recipeIngredientsItems",
  })
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "read",
    possession: "any",
  })
  async findRecipeIngredientsItems(
    @graphql.Parent() parent: Ingredients,
    @graphql.Args() args: RecipeIngredientsFindManyArgs
  ): Promise<RecipeIngredients[]> {
    const results = await this.service.findRecipeIngredientsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
