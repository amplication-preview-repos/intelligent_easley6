/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { IngredientsService } from "../ingredients.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { IngredientsCreateInput } from "./IngredientsCreateInput";
import { Ingredients } from "./Ingredients";
import { IngredientsFindManyArgs } from "./IngredientsFindManyArgs";
import { IngredientsWhereUniqueInput } from "./IngredientsWhereUniqueInput";
import { IngredientsUpdateInput } from "./IngredientsUpdateInput";
import { RecipeIngredientsFindManyArgs } from "../../recipeIngredients/base/RecipeIngredientsFindManyArgs";
import { RecipeIngredients } from "../../recipeIngredients/base/RecipeIngredients";
import { RecipeIngredientsWhereUniqueInput } from "../../recipeIngredients/base/RecipeIngredientsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class IngredientsControllerBase {
  constructor(
    protected readonly service: IngredientsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ingredients })
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createIngredients(
    @common.Body() data: IngredientsCreateInput
  ): Promise<Ingredients> {
    return await this.service.createIngredients({
      data: data,
      select: {
        createdAt: true,
        expirationDate: true,
        id: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Ingredients] })
  @ApiNestedQuery(IngredientsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ingredientsItems(
    @common.Req() request: Request
  ): Promise<Ingredients[]> {
    const args = plainToClass(IngredientsFindManyArgs, request.query);
    return this.service.ingredientsItems({
      ...args,
      select: {
        createdAt: true,
        expirationDate: true,
        id: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ingredients })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ingredients(
    @common.Param() params: IngredientsWhereUniqueInput
  ): Promise<Ingredients | null> {
    const result = await this.service.ingredients({
      where: params,
      select: {
        createdAt: true,
        expirationDate: true,
        id: true,
        name: true,
        price: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ingredients })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateIngredients(
    @common.Param() params: IngredientsWhereUniqueInput,
    @common.Body() data: IngredientsUpdateInput
  ): Promise<Ingredients | null> {
    try {
      return await this.service.updateIngredients({
        where: params,
        data: data,
        select: {
          createdAt: true,
          expirationDate: true,
          id: true,
          name: true,
          price: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ingredients })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteIngredients(
    @common.Param() params: IngredientsWhereUniqueInput
  ): Promise<Ingredients | null> {
    try {
      return await this.service.deleteIngredients({
        where: params,
        select: {
          createdAt: true,
          expirationDate: true,
          id: true,
          name: true,
          price: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recipeIngredientsItems")
  @ApiNestedQuery(RecipeIngredientsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecipeIngredients",
    action: "read",
    possession: "any",
  })
  async findRecipeIngredientsItems(
    @common.Req() request: Request,
    @common.Param() params: IngredientsWhereUniqueInput
  ): Promise<RecipeIngredients[]> {
    const query = plainToClass(RecipeIngredientsFindManyArgs, request.query);
    const results = await this.service.findRecipeIngredientsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        ingredient: {
          select: {
            id: true,
          },
        },

        quantity: true,

        recipe: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recipeIngredientsItems")
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "update",
    possession: "any",
  })
  async connectRecipeIngredientsItems(
    @common.Param() params: IngredientsWhereUniqueInput,
    @common.Body() body: RecipeIngredientsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeIngredientsItems: {
        connect: body,
      },
    };
    await this.service.updateIngredients({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recipeIngredientsItems")
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "update",
    possession: "any",
  })
  async updateRecipeIngredientsItems(
    @common.Param() params: IngredientsWhereUniqueInput,
    @common.Body() body: RecipeIngredientsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeIngredientsItems: {
        set: body,
      },
    };
    await this.service.updateIngredients({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recipeIngredientsItems")
  @nestAccessControl.UseRoles({
    resource: "Ingredients",
    action: "update",
    possession: "any",
  })
  async disconnectRecipeIngredientsItems(
    @common.Param() params: IngredientsWhereUniqueInput,
    @common.Body() body: RecipeIngredientsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recipeIngredientsItems: {
        disconnect: body,
      },
    };
    await this.service.updateIngredients({
      where: params,
      data,
      select: { id: true },
    });
  }
}
