/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Ingredients as PrismaIngredients,
  RecipeIngredients as PrismaRecipeIngredients,
} from "@prisma/client";

export class IngredientsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IngredientsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ingredients.count(args);
  }

  async ingredientsItems(
    args: Prisma.IngredientsFindManyArgs
  ): Promise<PrismaIngredients[]> {
    return this.prisma.ingredients.findMany(args);
  }
  async ingredients(
    args: Prisma.IngredientsFindUniqueArgs
  ): Promise<PrismaIngredients | null> {
    return this.prisma.ingredients.findUnique(args);
  }
  async createIngredients(
    args: Prisma.IngredientsCreateArgs
  ): Promise<PrismaIngredients> {
    return this.prisma.ingredients.create(args);
  }
  async updateIngredients(
    args: Prisma.IngredientsUpdateArgs
  ): Promise<PrismaIngredients> {
    return this.prisma.ingredients.update(args);
  }
  async deleteIngredients(
    args: Prisma.IngredientsDeleteArgs
  ): Promise<PrismaIngredients> {
    return this.prisma.ingredients.delete(args);
  }

  async findRecipeIngredientsItems(
    parentId: string,
    args: Prisma.RecipeIngredientsFindManyArgs
  ): Promise<PrismaRecipeIngredients[]> {
    return this.prisma.ingredients
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recipeIngredientsItems(args);
  }
}
